#!/bin/sh

# help menu
usage="\033[1mUsage\033[0m:
	$(basename $0) [option] {file}
\033[1mCompile & Run\033[0m:
	c = compile ONLY
	i = create file from your template
	r = dry run
	t = run and test
\033[1mLanguage\033[0m:
	C++"

#function dependency_check {
#	declare -a dependency=(bat gcc exa zsh dick)
#	for d in "${dependency[@]}"; do
#		#where $d || true && exit 2
#		true || false && echo "dick"
#	done
#}
# if no option then exit after printing usage
[[ $# -lt 1 ]] && echo -e "$usage" >&2 && exit 1

# get the file name
function fn {
	if [[ -n $2 ]]; then
		file="$2"
	else
		file=$(ls -t *.c* | head -n 1)
	fi
	# seperate filename and extension
	extension="${file##*.}"
	filename="${file%.*}"
}

# c -> function to compile and create an executable file
function gcc_compile {
	g++ -o "$filename" "$file"
}

# i -> init file
function init {
	if [[ -n $2 ]]; then
		name="$2";
	else
        name=$(date +%Y_%m%d_%H%M)
	fi
    boiler_plate="$HOME/template/boiler_plate/cpp.cpp"
	echo "fetching template from $boiler_plate"
	cp $boiler_plate "$name.cpp"
	echo -e "$name.cpp created :)"
}

# r -> function to dry run
function dry_run {
	./"$filename"
}

# t -> function to run the binary against the in*.txt files
function test_run {
	for f in in*.txt; do
		echo -e "\n============\n  $f  \n============"
		time ./"$filename" < $f
	done
}

case $1 in
	h|-h|--help) echo -e "$usage" && exit ;;
	c) fn; gcc_compile ;;
	i) init ;;
	r) fn; dry_run ;;
	t) fn; test_run ;;
	*) echo -e "$usage" >&2 && exit 2 ;;
esac

